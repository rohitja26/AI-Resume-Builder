{
  "version": 3,
  "sources": ["../../../@strapi/content-releases/admin/src/constants.ts", "../../../@strapi/content-releases/admin/src/services/release.ts", "../../../@strapi/content-releases/admin/src/components/ReleaseActionOptions.tsx", "../../../@strapi/content-releases/admin/src/components/ReleaseActionModal.tsx", "../../../@strapi/content-releases/admin/src/utils/time.ts", "../../../@strapi/content-releases/admin/src/components/ReleaseActionMenu.tsx", "../../../@strapi/content-releases/admin/src/components/ReleasesPanel.tsx", "../../../@strapi/content-releases/admin/src/pluginId.ts", "../../../@strapi/content-releases/admin/src/utils/prefixPluginTranslations.ts", "../../../@strapi/content-releases/admin/src/index.ts"],
  "sourcesContent": ["import type { Permission as StrapiPermission } from '@strapi/admin/strapi-admin';\n\nexport const PERMISSIONS = {\n  main: [\n    {\n      action: 'plugin::content-releases.read',\n      subject: null,\n      id: '',\n      actionParameters: {},\n      properties: {},\n      conditions: [],\n    },\n  ],\n  create: [\n    {\n      action: 'plugin::content-releases.create',\n      subject: null,\n      id: '',\n      actionParameters: {},\n      properties: {},\n      conditions: [],\n    },\n  ],\n  update: [\n    {\n      action: 'plugin::content-releases.update',\n      subject: null,\n      id: '',\n      actionParameters: {},\n      properties: {},\n      conditions: [],\n    },\n  ],\n  delete: [\n    {\n      action: 'plugin::content-releases.delete',\n      subject: null,\n      id: '',\n      actionParameters: {},\n      properties: {},\n      conditions: [],\n    },\n  ],\n  createAction: [\n    {\n      action: 'plugin::content-releases.create-action',\n      subject: null,\n      id: '',\n      actionParameters: {},\n      properties: {},\n      conditions: [],\n    },\n  ],\n  deleteAction: [\n    {\n      action: 'plugin::content-releases.delete-action',\n      subject: null,\n      id: '',\n      actionParameters: {},\n      properties: {},\n      conditions: [],\n    },\n  ],\n  publish: [\n    {\n      action: 'plugin::content-releases.publish',\n      subject: null,\n      id: '',\n      actionParameters: {},\n      properties: {},\n      conditions: [],\n    },\n  ],\n} satisfies Record<string, StrapiPermission[]>;\n\nexport const PERMISSIONS_SETTINGS = {\n  read: [\n    {\n      action: 'plugin::content-releases.settings.read',\n      subject: null,\n      id: '',\n      actionParameters: {},\n      properties: {},\n      conditions: [],\n    },\n  ],\n  update: [\n    {\n      action: 'plugin::content-releases.settings.update',\n      subject: null,\n      id: '',\n      actionParameters: {},\n      properties: {},\n      conditions: [],\n    },\n  ],\n} satisfies Record<string, StrapiPermission[]>;\n", "import { adminApi } from '@strapi/admin/strapi-admin';\n\nimport {\n  CreateReleaseAction,\n  CreateManyReleaseActions,\n  DeleteReleaseAction,\n} from '../../../shared/contracts/release-actions';\n\nimport type {\n  GetReleaseActions,\n  UpdateReleaseAction,\n  ReleaseActionGroupBy,\n} from '../../../shared/contracts/release-actions';\nimport type {\n  CreateRelease,\n  DeleteRelease,\n  GetReleases,\n  GetReleasesByDocumentAttached,\n  UpdateRelease,\n  GetRelease,\n  PublishRelease,\n  MapEntriesToReleases,\n} from '../../../shared/contracts/releases';\nimport type { GetSettings, UpdateSettings } from '../../../shared/contracts/settings';\nimport type { EndpointDefinition } from '@reduxjs/toolkit/query';\n\nexport interface GetReleasesQueryParams {\n  page?: number;\n  pageSize?: number;\n  filters?: {\n    releasedAt?: {\n      // TODO: this should be a boolean, find a way to avoid strings\n      $notNull?: boolean | 'true' | 'false';\n    };\n  };\n}\n\nexport interface GetReleaseActionsQueryParams {\n  page?: number;\n  pageSize?: number;\n  groupBy?: ReleaseActionGroupBy;\n}\n\ntype GetReleasesTabResponse = GetReleases.Response & {\n  meta: {\n    activeTab: 'pending' | 'done';\n  };\n};\n\ntype AnyEndpointDefinition = EndpointDefinition<any, any, any, any>;\n\n// TODO: move this into the admin code & expose an improved version of enhanceEndpoints or a new function\nconst extendInvalidatesTags = (\n  endpoint: AnyEndpointDefinition,\n  extraTags: string[] | { type: string; id: string }[]\n) => {\n  if (!endpoint) {\n    return;\n  }\n\n  const originalInvalidatesTags = endpoint.invalidatesTags;\n\n  const newInvalidatesTags: AnyEndpointDefinition['invalidatesTags'] = (\n    result,\n    err,\n    args,\n    meta\n  ) => {\n    const originalTags =\n      typeof originalInvalidatesTags === 'function'\n        ? originalInvalidatesTags(result, err, args, meta)\n        : originalInvalidatesTags;\n\n    return [...(originalTags ?? []), ...extraTags];\n  };\n\n  Object.assign(endpoint, { invalidatesTags: newInvalidatesTags });\n};\n\nconst releaseApi = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['Release', 'ReleaseAction', 'EntriesInRelease', 'ReleaseSettings'],\n    endpoints: {\n      updateDocument(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n      deleteDocument(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n      deleteManyDocuments(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n      discardDocument(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n    },\n  })\n  .injectEndpoints({\n    endpoints: (build) => {\n      return {\n        getReleasesForEntry: build.query<\n          GetReleasesByDocumentAttached.Response,\n          Partial<GetReleasesByDocumentAttached.Request['query']>\n        >({\n          query(params) {\n            return {\n              url: '/content-releases/getByDocumentAttached',\n              method: 'GET',\n              config: {\n                params,\n              },\n            };\n          },\n          providesTags: (result) =>\n            result\n              ? [\n                  ...result.data.map(({ id }) => ({ type: 'Release' as const, id })),\n                  { type: 'Release', id: 'LIST' },\n                ]\n              : [],\n        }),\n        getReleases: build.query<GetReleasesTabResponse, GetReleasesQueryParams | void>({\n          query(\n            { page, pageSize, filters } = {\n              page: 1,\n              pageSize: 16,\n              filters: {\n                releasedAt: {\n                  $notNull: false,\n                },\n              },\n            }\n          ) {\n            return {\n              url: '/content-releases',\n              method: 'GET',\n              config: {\n                params: {\n                  page: page || 1,\n                  pageSize: pageSize || 16,\n                  filters: filters || {\n                    releasedAt: {\n                      $notNull: false,\n                    },\n                  },\n                },\n              },\n            };\n          },\n          transformResponse(response: GetReleasesTabResponse, meta, arg) {\n            const releasedAtValue = arg?.filters?.releasedAt?.$notNull;\n            const isActiveDoneTab = releasedAtValue === 'true';\n            const newResponse: GetReleasesTabResponse = {\n              ...response,\n              meta: {\n                ...response.meta,\n                activeTab: isActiveDoneTab ? 'done' : 'pending',\n              },\n            };\n\n            return newResponse;\n          },\n          providesTags: (result) =>\n            result\n              ? [\n                  ...result.data.map(({ id }) => ({ type: 'Release' as const, id })),\n                  { type: 'Release', id: 'LIST' },\n                ]\n              : [{ type: 'Release', id: 'LIST' }],\n        }),\n        getRelease: build.query<GetRelease.Response, GetRelease.Request['params']>({\n          query({ id }) {\n            return {\n              url: `/content-releases/${id}`,\n              method: 'GET',\n            };\n          },\n          providesTags: (result, error, arg) => [{ type: 'Release' as const, id: arg.id }],\n        }),\n        getReleaseActions: build.query<\n          GetReleaseActions.Response,\n          GetReleaseActions.Request['params'] & GetReleaseActions.Request['query']\n        >({\n          query({ releaseId, ...params }) {\n            return {\n              url: `/content-releases/${releaseId}/actions`,\n              method: 'GET',\n              config: {\n                params,\n              },\n            };\n          },\n          providesTags: [{ type: 'ReleaseAction', id: 'LIST' }],\n        }),\n        createRelease: build.mutation<CreateRelease.Response, CreateRelease.Request['body']>({\n          query(data) {\n            return {\n              url: '/content-releases',\n              method: 'POST',\n              data,\n            };\n          },\n          invalidatesTags: [{ type: 'Release', id: 'LIST' }],\n        }),\n        updateRelease: build.mutation<\n          void,\n          UpdateRelease.Request['params'] & UpdateRelease.Request['body']\n        >({\n          query({ id, ...data }) {\n            return {\n              url: `/content-releases/${id}`,\n              method: 'PUT',\n              data,\n            };\n          },\n          invalidatesTags: (result, error, arg) => [{ type: 'Release', id: arg.id }],\n        }),\n        createReleaseAction: build.mutation<\n          CreateReleaseAction.Response,\n          CreateReleaseAction.Request\n        >({\n          query({ body, params }) {\n            return {\n              url: `/content-releases/${params.releaseId}/actions`,\n              method: 'POST',\n              data: body,\n            };\n          },\n          invalidatesTags: [\n            { type: 'Release', id: 'LIST' },\n            { type: 'ReleaseAction', id: 'LIST' },\n          ],\n        }),\n        createManyReleaseActions: build.mutation<\n          CreateManyReleaseActions.Response,\n          CreateManyReleaseActions.Request\n        >({\n          query({ body, params }) {\n            return {\n              url: `/content-releases/${params.releaseId}/actions/bulk`,\n              method: 'POST',\n              data: body,\n            };\n          },\n          invalidatesTags: [\n            { type: 'Release', id: 'LIST' },\n            { type: 'ReleaseAction', id: 'LIST' },\n            { type: 'EntriesInRelease' },\n          ],\n        }),\n        updateReleaseAction: build.mutation<\n          UpdateReleaseAction.Response,\n          UpdateReleaseAction.Request & { query: GetReleaseActions.Request['query'] } & {\n            actionPath: [string, number];\n          }\n        >({\n          query({ body, params }) {\n            return {\n              url: `/content-releases/${params.releaseId}/actions/${params.actionId}`,\n              method: 'PUT',\n              data: body,\n            };\n          },\n          invalidatesTags: () => [{ type: 'ReleaseAction', id: 'LIST' }],\n          async onQueryStarted({ body, params, query, actionPath }, { dispatch, queryFulfilled }) {\n            // We need to mimic the same params received by the getReleaseActions query\n            const paramsWithoutActionId = {\n              releaseId: params.releaseId,\n              ...query,\n            };\n\n            const patchResult = dispatch(\n              releaseApi.util.updateQueryData(\n                'getReleaseActions',\n                paramsWithoutActionId,\n                (draft) => {\n                  const [key, index] = actionPath;\n                  const action = draft.data[key][index];\n\n                  if (action) {\n                    action.type = body.type;\n                  }\n                }\n              )\n            );\n\n            try {\n              await queryFulfilled;\n            } catch {\n              patchResult.undo();\n            }\n          },\n        }),\n        deleteReleaseAction: build.mutation<\n          DeleteReleaseAction.Response,\n          DeleteReleaseAction.Request\n        >({\n          query({ params }) {\n            return {\n              url: `/content-releases/${params.releaseId}/actions/${params.actionId}`,\n              method: 'DELETE',\n            };\n          },\n          invalidatesTags: (result, error, arg) => [\n            { type: 'Release', id: 'LIST' },\n            { type: 'Release', id: arg.params.releaseId },\n            { type: 'ReleaseAction', id: 'LIST' },\n            { type: 'EntriesInRelease' },\n          ],\n        }),\n        publishRelease: build.mutation<PublishRelease.Response, PublishRelease.Request['params']>({\n          query({ id }) {\n            return {\n              url: `/content-releases/${id}/publish`,\n              method: 'POST',\n            };\n          },\n          invalidatesTags: (result, error, arg) => [{ type: 'Release', id: arg.id }],\n        }),\n        deleteRelease: build.mutation<DeleteRelease.Response, DeleteRelease.Request['params']>({\n          query({ id }) {\n            return {\n              url: `/content-releases/${id}`,\n              method: 'DELETE',\n            };\n          },\n          invalidatesTags: () => [{ type: 'Release', id: 'LIST' }, { type: 'EntriesInRelease' }],\n        }),\n        getMappedEntriesInReleases: build.query<\n          MapEntriesToReleases.Response['data'],\n          MapEntriesToReleases.Request['query']\n        >({\n          query(params) {\n            return {\n              url: '/content-releases/mapEntriesToReleases',\n              method: 'GET',\n              config: {\n                params,\n              },\n            };\n          },\n          transformResponse(response: MapEntriesToReleases.Response) {\n            return response.data;\n          },\n          providesTags: [{ type: 'EntriesInRelease' }],\n        }),\n        getReleaseSettings: build.query<GetSettings.Response, GetSettings.Request | void>({\n          query: () => '/content-releases/settings',\n          providesTags: [{ type: 'ReleaseSettings' }],\n        }),\n        updateReleaseSettings: build.mutation<void, UpdateSettings.Request['body']>({\n          query(data) {\n            return {\n              url: '/content-releases/settings',\n              method: 'PUT',\n              data,\n            };\n          },\n          invalidatesTags: (result, error, arg) => [{ type: 'ReleaseSettings' }],\n        }),\n      };\n    },\n  });\n\nconst {\n  useGetReleasesQuery,\n  useGetReleasesForEntryQuery,\n  useGetReleaseQuery,\n  useGetReleaseActionsQuery,\n  useCreateReleaseMutation,\n  useCreateReleaseActionMutation,\n  useCreateManyReleaseActionsMutation,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseActionMutation,\n  useDeleteReleaseMutation,\n  useGetMappedEntriesInReleasesQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseSettingsMutation,\n} = releaseApi;\n\nexport {\n  useGetReleasesQuery,\n  useGetReleasesForEntryQuery,\n  useGetReleaseQuery,\n  useGetReleaseActionsQuery,\n  useCreateReleaseMutation,\n  useCreateReleaseActionMutation,\n  useCreateManyReleaseActionsMutation,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseActionMutation,\n  useDeleteReleaseMutation,\n  useGetMappedEntriesInReleasesQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseSettingsMutation,\n  releaseApi,\n};\n", "import * as React from 'react';\n\nimport { VisuallyHidden, Field, Flex } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\ninterface FieldWrapperProps extends Field.Props {\n  actionType: 'publish' | 'unpublish';\n}\n\nconst getBorderLeftRadiusValue = (actionType: FieldWrapperProps['actionType']) => {\n  return actionType === 'publish' ? 1 : 0;\n};\n\nconst getBorderRightRadiusValue = (actionType: FieldWrapperProps['actionType']) => {\n  return actionType === 'publish' ? 0 : 1;\n};\n\nconst FieldWrapper = styled(Field.Root)<{\n  $actionType: 'publish' | 'unpublish';\n}>`\n  border-top-left-radius: ${({ $actionType, theme }) =>\n    theme.spaces[getBorderLeftRadiusValue($actionType)]};\n  border-bottom-left-radius: ${({ $actionType, theme }) =>\n    theme.spaces[getBorderLeftRadiusValue($actionType)]};\n  border-top-right-radius: ${({ $actionType, theme }) =>\n    theme.spaces[getBorderRightRadiusValue($actionType)]};\n  border-bottom-right-radius: ${({ $actionType, theme }) =>\n    theme.spaces[getBorderRightRadiusValue($actionType)]};\n\n  > label {\n    color: inherit;\n    padding: ${({ theme }) => `${theme.spaces[2]} ${theme.spaces[3]}`};\n    text-align: center;\n    vertical-align: middle;\n    text-transform: capitalize;\n  }\n\n  &[data-checked='true'] {\n    color: ${({ theme, $actionType }) =>\n      $actionType === 'publish' ? theme.colors.primary700 : theme.colors.danger600};\n    background-color: ${({ theme, $actionType }) =>\n      $actionType === 'publish' ? theme.colors.primary100 : theme.colors.danger100};\n    border-color: ${({ theme, $actionType }) =>\n      $actionType === 'publish' ? theme.colors.primary700 : theme.colors.danger600};\n  }\n\n  &[data-checked='false'] {\n    border-left: ${({ $actionType }) => $actionType === 'unpublish' && 'none'};\n    border-right: ${({ $actionType }) => $actionType === 'publish' && 'none'};\n  }\n\n  &[data-checked='false'][data-disabled='false']:hover {\n    color: ${({ theme }) => theme.colors.neutral700};\n    background-color: ${({ theme }) => theme.colors.neutral100};\n    border-color: ${({ theme }) => theme.colors.neutral200};\n\n    & > label {\n      cursor: pointer;\n    }\n  }\n\n  &[data-disabled='true'] {\n    color: ${({ theme }) => theme.colors.neutral600};\n    background-color: ${({ theme }) => theme.colors.neutral150};\n    border-color: ${({ theme }) => theme.colors.neutral300};\n  }\n`;\n\ninterface ActionOptionProps {\n  selected: 'publish' | 'unpublish';\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  name: string;\n  disabled?: boolean;\n}\n\ninterface OptionProps extends ActionOptionProps {\n  actionType: 'publish' | 'unpublish';\n}\n\nconst ActionOption = ({\n  selected,\n  actionType,\n  handleChange,\n  name,\n  disabled = false,\n}: OptionProps) => {\n  return (\n    <FieldWrapper\n      $actionType={actionType}\n      background=\"primary0\"\n      borderColor=\"neutral200\"\n      color={selected === actionType ? 'primary600' : 'neutral600'}\n      position=\"relative\"\n      cursor=\"pointer\"\n      data-checked={selected === actionType}\n      data-disabled={disabled && selected !== actionType}\n    >\n      <Field.Label>\n        <VisuallyHidden>\n          <Field.Input\n            type=\"radio\"\n            name={name}\n            checked={selected === actionType}\n            onChange={handleChange}\n            value={actionType}\n            disabled={disabled}\n          />\n        </VisuallyHidden>\n        {actionType}\n      </Field.Label>\n    </FieldWrapper>\n  );\n};\n\nexport const ReleaseActionOptions = ({\n  selected,\n  handleChange,\n  name,\n  disabled = false,\n}: ActionOptionProps) => {\n  return (\n    <Flex>\n      <ActionOption\n        actionType=\"publish\"\n        selected={selected}\n        handleChange={handleChange}\n        name={name}\n        disabled={disabled}\n      />\n      <ActionOption\n        actionType=\"unpublish\"\n        selected={selected}\n        handleChange={handleChange}\n        name={name}\n        disabled={disabled}\n      />\n    </Flex>\n  );\n};\n", "import * as React from 'react';\n\nimport {\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n} from '@strapi/admin/strapi-admin';\nimport { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\nimport {\n  Box,\n  Button,\n  Flex,\n  SingleSelect,\n  SingleSelectOption,\n  EmptyStateLayout,\n  LinkButton,\n  Field,\n  Modal,\n} from '@strapi/design-system';\nimport { PaperPlane } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { useFormik } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { Link as ReactRouterLink } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { CreateReleaseAction } from '../../../shared/contracts/release-actions';\nimport { PERMISSIONS } from '../constants';\nimport { useCreateReleaseActionMutation, useGetReleasesForEntryQuery } from '../services/release';\n\nimport { ReleaseActionOptions } from './ReleaseActionOptions';\n\nimport type {\n  DocumentActionComponent,\n  DocumentActionProps,\n} from '@strapi/content-manager/strapi-admin';\nimport type { UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * AddActionToReleaseModal\n * -----------------------------------------------------------------------------------------------*/\nexport const RELEASE_ACTION_FORM_SCHEMA = yup.object().shape({\n  type: yup.string().oneOf(['publish', 'unpublish']).required(),\n  releaseId: yup.string().required(),\n});\n\nexport interface FormValues {\n  type: CreateReleaseAction.Request['body']['type'];\n  releaseId: CreateReleaseAction.Request['params']['releaseId'];\n}\n\nexport const INITIAL_VALUES = {\n  type: 'publish',\n  releaseId: '',\n} satisfies FormValues;\n\ninterface AddActionToReleaseModalProps {\n  contentType: string;\n  documentId?: string;\n  onInputChange: (field: keyof FormValues, value: string | number) => void;\n  values: FormValues;\n}\n\nexport const NoReleases = () => {\n  const { formatMessage } = useIntl();\n  return (\n    <EmptyStateLayout\n      icon={<EmptyDocuments width=\"16rem\" />}\n      content={formatMessage({\n        id: 'content-releases.content-manager-edit-view.add-to-release.no-releases-message',\n        defaultMessage:\n          'No available releases. Open the list of releases and create a new one from there.',\n      })}\n      action={\n        <LinkButton\n          to={{\n            pathname: '/plugins/content-releases',\n          }}\n          tag={ReactRouterLink}\n          variant=\"secondary\"\n        >\n          {formatMessage({\n            id: 'content-releases.content-manager-edit-view.add-to-release.redirect-button',\n            defaultMessage: 'Open the list of releases',\n          })}\n        </LinkButton>\n      }\n      shadow=\"none\"\n    />\n  );\n};\n\nconst AddActionToReleaseModal = ({\n  contentType,\n  documentId,\n  onInputChange,\n  values,\n}: AddActionToReleaseModalProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n  const locale = query.plugins?.i18n?.locale;\n\n  // Get all 'pending' releases that do not have the entry attached\n  const response = useGetReleasesForEntryQuery({\n    contentType,\n    entryDocumentId: documentId,\n    hasEntryAttached: false,\n    locale,\n  });\n\n  const releases = response.data?.data;\n\n  if (releases?.length === 0) {\n    return <NoReleases />;\n  }\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n      <Box paddingBottom={6}>\n        <Field.Root required>\n          <Field.Label>\n            {formatMessage({\n              id: 'content-releases.content-manager-edit-view.add-to-release.select-label',\n              defaultMessage: 'Select a release',\n            })}\n          </Field.Label>\n          <SingleSelect\n            required\n            placeholder={formatMessage({\n              id: 'content-releases.content-manager-edit-view.add-to-release.select-placeholder',\n              defaultMessage: 'Select',\n            })}\n            name=\"releaseId\"\n            onChange={(value) => onInputChange('releaseId', value)}\n            value={values.releaseId}\n          >\n            {releases?.map((release) => (\n              <SingleSelectOption key={release.id} value={release.id}>\n                {release.name}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Field.Root>\n      </Box>\n      <Field.Label>\n        {formatMessage({\n          id: 'content-releases.content-manager-edit-view.add-to-release.action-type-label',\n          defaultMessage: 'What do you want to do with this entry?',\n        })}\n      </Field.Label>\n      <ReleaseActionOptions\n        selected={values.type}\n        handleChange={(e) => onInputChange('type', e.target.value)}\n        name=\"type\"\n      />\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseActionModalForm\n * -----------------------------------------------------------------------------------------------*/\n\nconst ReleaseActionModalForm: DocumentActionComponent = ({\n  documentId,\n  model,\n  collectionType,\n}: DocumentActionProps) => {\n  const { formatMessage } = useIntl();\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canCreateAction } = allowedActions;\n  const [createReleaseAction, { isLoading }] = useCreateReleaseActionMutation();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n  const locale = query.plugins?.i18n?.locale;\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>, onClose: () => void) => {\n    try {\n      await formik.handleSubmit(e);\n      onClose();\n    } catch (error) {\n      if (isFetchError(error)) {\n        // Handle axios error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      } else {\n        // Handle generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'notification.error',\n            defaultMessage: 'An error occurred',\n          }),\n        });\n      }\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: INITIAL_VALUES,\n    validationSchema: RELEASE_ACTION_FORM_SCHEMA,\n    onSubmit: async (values: FormValues) => {\n      if (collectionType === 'collection-types' && !documentId) {\n        throw new Error('Document id is required');\n      }\n\n      const response = await createReleaseAction({\n        body: {\n          type: values.type,\n          contentType: model as UID.ContentType,\n          entryDocumentId: documentId,\n          locale,\n        },\n        params: { releaseId: values.releaseId },\n      });\n\n      if ('data' in response) {\n        // Handle success\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'content-releases.content-manager-edit-view.add-to-release.notification.success',\n            defaultMessage: 'Entry added to release',\n          }),\n        });\n\n        return;\n      }\n\n      if ('error' in response) {\n        throw response.error;\n      }\n    },\n  });\n\n  const {\n    edit: { options },\n  } = useDocumentLayout(model);\n\n  // Project is not EE or contentType does not have draftAndPublish enabled\n  if (!window.strapi.isEE || !options?.draftAndPublish || !canCreateAction) {\n    return null;\n  }\n\n  if (collectionType === 'collection-types' && (!documentId || documentId === 'create')) {\n    return null;\n  }\n\n  return {\n    label: formatMessage({\n      id: 'content-releases.content-manager-edit-view.add-to-release',\n      defaultMessage: 'Add to release',\n    }),\n    icon: <PaperPlane />,\n    position: ['panel', 'table-row'],\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: 'content-releases.content-manager-edit-view.add-to-release',\n        defaultMessage: 'Add to release',\n      }),\n      content: (\n        <AddActionToReleaseModal\n          contentType={model}\n          documentId={documentId}\n          onInputChange={formik.setFieldValue}\n          values={formik.values}\n        />\n      ),\n      footer: ({ onClose }) => (\n        <Modal.Footer>\n          <Button onClick={onClose} variant=\"tertiary\" name=\"cancel\">\n            {formatMessage({\n              id: 'content-releases.content-manager-edit-view.add-to-release.cancel-button',\n              defaultMessage: 'Cancel',\n            })}\n          </Button>\n          <Button\n            type=\"submit\"\n            // @ts-expect-error - formik ReactEvent types don't match button onClick types as they expect a MouseEvent\n            onClick={(e) => handleSubmit(e, onClose)}\n            disabled={!formik.values.releaseId}\n            loading={isLoading}\n          >\n            {formatMessage({\n              id: 'content-releases.content-manager-edit-view.add-to-release.continue-button',\n              defaultMessage: 'Continue',\n            })}\n          </Button>\n        </Modal.Footer>\n      ),\n    },\n  };\n};\n\nexport { ReleaseActionModalForm };\n", "export const getTimezoneOffset = (timezone: string, date: Date) => {\n  try {\n    const offsetPart = new Intl.DateTimeFormat('en', {\n      timeZone: timezone,\n      timeZoneName: 'longOffset',\n    })\n      .formatToParts(date)\n      .find((part) => part.type === 'timeZoneName');\n\n    const offset = offsetPart ? offsetPart.value : '';\n\n    // We want to show time based on UTC, not GMT so we swap that.\n    let utcOffset = offset.replace('GMT', 'UTC');\n\n    // For perfect UTC (UTC+0:00) we only get the string UTC, So we need to append the 0's.\n    if (!utcOffset.includes('+') && !utcOffset.includes('-')) {\n      utcOffset = `${utcOffset}+00:00`;\n    }\n\n    return utcOffset;\n  } catch (error) {\n    // When timezone is invalid we catch the error and return empty to don't break the app\n    return '';\n  }\n};\n\ninterface ITimezoneOption {\n  offset: string;\n  value: string;\n}\n\nexport const getTimezones = (selectedDate: Date) => {\n  const timezoneList: ITimezoneOption[] = Intl.supportedValuesOf('timeZone').map((timezone) => {\n    // Timezone will be in the format GMT${OFFSET} where offset could be nothing,\n    // a four digit string e.g. +05:00 or -08:00\n    const utcOffset = getTimezoneOffset(timezone, selectedDate);\n\n    // Offset and timezone are concatenated with '&', so to split and save the required timezone in DB\n    return { offset: utcOffset, value: `${utcOffset}&${timezone}` } satisfies ITimezoneOption;\n  });\n\n  const systemTimezone = timezoneList.find(\n    (timezone) => timezone.value.split('&')[1] === Intl.DateTimeFormat().resolvedOptions().timeZone\n  );\n\n  return { timezoneList, systemTimezone };\n};\n", "import * as React from 'react';\n\nimport {\n  useAPIErrorHandler,\n  useNotification,\n  useAuth,\n  useRBAC,\n  isFetchError,\n} from '@strapi/admin/strapi-admin';\nimport { Flex, Typography, Menu, AccessibleIcon } from '@strapi/design-system';\nimport { Cross, More, Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { DeleteReleaseAction, ReleaseAction } from '../../../shared/contracts/release-actions';\nimport { Release } from '../../../shared/contracts/releases';\nimport { PERMISSIONS } from '../constants';\nimport { useDeleteReleaseActionMutation } from '../services/release';\n\nconst StyledMenuItem = styled(Menu.Item)<{ $variant?: 'neutral' | 'danger' }>`\n  &:hover {\n    background: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}100`]};\n\n    svg {\n      fill: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}600`]};\n    }\n\n    a {\n      color: ${({ theme }) => theme.colors.neutral800};\n    }\n  }\n\n  svg {\n    color: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}500`]};\n  }\n\n  span {\n    color: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}800`]};\n  }\n\n  span,\n  a {\n    width: 100%;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * DeleteReleaseActionItemProps\n * -----------------------------------------------------------------------------------------------*/\ninterface DeleteReleaseActionItemProps {\n  releaseId: DeleteReleaseAction.Request['params']['releaseId'];\n  actionId: DeleteReleaseAction.Request['params']['actionId'];\n}\n\nconst DeleteReleaseActionItem = ({ releaseId, actionId }: DeleteReleaseActionItemProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [deleteReleaseAction] = useDeleteReleaseActionMutation();\n  const {\n    allowedActions: { canDeleteAction },\n  } = useRBAC(PERMISSIONS);\n\n  const handleDeleteAction = async () => {\n    const response = await deleteReleaseAction({\n      params: { releaseId, actionId },\n    });\n\n    if ('data' in response) {\n      // Handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.content-manager-edit-view.remove-from-release.notification.success',\n          defaultMessage: 'Entry removed from release',\n        }),\n      });\n\n      return;\n    }\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // Handle fetch error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Handle generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (!canDeleteAction) {\n    return null;\n  }\n\n  return (\n    <StyledMenuItem $variant=\"danger\" onSelect={handleDeleteAction}>\n      <Flex gap={2}>\n        <Cross width=\"1.6rem\" height=\"1.6rem\" />\n        <Typography textColor=\"danger600\" variant=\"omega\">\n          {formatMessage({\n            id: 'content-releases.content-manager-edit-view.remove-from-release',\n            defaultMessage: 'Remove from release',\n          })}\n        </Typography>\n      </Flex>\n    </StyledMenuItem>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseActionEntryLinkItem\n * -----------------------------------------------------------------------------------------------*/\ninterface ReleaseActionEntryLinkItemProps {\n  contentTypeUid: ReleaseAction['contentType'];\n  documentId: ReleaseAction['entry']['documentId'];\n  locale: ReleaseAction['locale'];\n}\n\nconst ReleaseActionEntryLinkItem = ({\n  contentTypeUid,\n  documentId,\n  locale,\n}: ReleaseActionEntryLinkItemProps) => {\n  const { formatMessage } = useIntl();\n  const userPermissions = useAuth('ReleaseActionEntryLinkItem', (state) => state.permissions);\n\n  // Confirm user has permissions to access the entry for the given locale\n  const canUpdateEntryForLocale = React.useMemo(() => {\n    const updatePermissions = userPermissions.find(\n      (permission) =>\n        permission.subject === contentTypeUid &&\n        permission.action === 'plugin::content-manager.explorer.update'\n    );\n\n    if (!updatePermissions) {\n      return false;\n    }\n\n    return Boolean(!locale || updatePermissions.properties?.locales?.includes(locale));\n  }, [contentTypeUid, locale, userPermissions]);\n\n  const {\n    allowedActions: { canUpdate: canUpdateContentType },\n  } = useRBAC({\n    updateContentType: [\n      {\n        action: 'plugin::content-manager.explorer.update',\n        subject: contentTypeUid,\n      },\n    ],\n  });\n\n  if (!canUpdateContentType || !canUpdateEntryForLocale) {\n    return null;\n  }\n\n  return (\n    <StyledMenuItem\n      /* @ts-expect-error inference isn't working in DS */\n      tag={NavLink}\n      isLink\n      to={{\n        pathname: `/content-manager/collection-types/${contentTypeUid}/${documentId}`,\n        search: locale && `?plugins[i18n][locale]=${locale}`,\n      }}\n    >\n      <Flex gap={2}>\n        <Pencil width=\"1.6rem\" height=\"1.6rem\" />\n        <Typography variant=\"omega\">\n          {formatMessage({\n            id: 'content-releases.content-manager-edit-view.edit-entry',\n            defaultMessage: 'Edit entry',\n          })}\n        </Typography>\n      </Flex>\n    </StyledMenuItem>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EditReleaseItem\n * -----------------------------------------------------------------------------------------------*/\ninterface EditReleaseItemProps {\n  releaseId: Release['id'];\n}\n\nconst EditReleaseItem = ({ releaseId }: EditReleaseItemProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    /* @ts-expect-error inference isn't working in DS */\n    <StyledMenuItem tag={NavLink} isLink to={`/plugins/content-releases/${releaseId}`}>\n      <Flex gap={2}>\n        <Pencil width=\"1.6rem\" height=\"1.6rem\" />\n        <Typography textColor=\"neutral800\" variant=\"omega\">\n          {formatMessage({\n            id: 'content-releases.content-manager-edit-view.edit-release',\n            defaultMessage: 'Edit release',\n          })}\n        </Typography>\n      </Flex>\n    </StyledMenuItem>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Root\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RootProps {\n  children: React.ReactNode;\n  hasTriggerBorder?: boolean;\n}\n\nconst Root = ({ children }: RootProps) => {\n  const { formatMessage } = useIntl();\n\n  const { allowedActions } = useRBAC(PERMISSIONS);\n\n  return (\n    // A user can access the dropdown if they have permissions to delete a release-action OR update a release\n    allowedActions.canDeleteAction || allowedActions.canUpdate ? (\n      <Menu.Root>\n        <Menu.Trigger variant=\"tertiary\" endIcon={null} paddingLeft={2} paddingRight={2}>\n          <AccessibleIcon\n            label={formatMessage({\n              id: 'content-releases.content-manager-edit-view.release-action-menu',\n              defaultMessage: 'Release action options',\n            })}\n          >\n            <More />\n          </AccessibleIcon>\n        </Menu.Trigger>\n        <Menu.Content top={1} popoverPlacement=\"bottom-end\">\n          {children}\n        </Menu.Content>\n      </Menu.Root>\n    ) : null\n  );\n};\n\nexport const ReleaseActionMenu = {\n  Root,\n  EditReleaseItem,\n  DeleteReleaseActionItem,\n  ReleaseActionEntryLinkItem,\n};\n", "import { useRBAC, useQueryParams } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PERMISSIONS } from '../constants';\nimport { useGetReleasesForEntryQuery } from '../services/release';\nimport { getTimezoneOffset } from '../utils/time';\n\nimport { ReleaseActionMenu } from './ReleaseActionMenu';\n\nimport type { PanelComponent, PanelComponentProps } from '@strapi/content-manager/strapi-admin';\n\nconst Panel: PanelComponent = ({ model, documentId, collectionType }: PanelComponentProps) => {\n  const [{ query }] = useQueryParams<{ plugins: { i18n: { locale: string } } }>();\n  const locale = query.plugins?.i18n?.locale;\n\n  const {\n    edit: { options },\n  } = useDocumentLayout(model);\n  const { formatMessage, formatDate, formatTime } = useIntl();\n\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canRead, canDeleteAction } = allowedActions;\n\n  const response = useGetReleasesForEntryQuery({\n    contentType: model,\n    entryDocumentId: documentId,\n    locale,\n    hasEntryAttached: true,\n  });\n  const releases = response.data?.data;\n\n  const getReleaseColorVariant = (\n    actionType: 'publish' | 'unpublish',\n    shade: '100' | '200' | '600'\n  ) => {\n    if (actionType === 'unpublish') {\n      return `secondary${shade}`;\n    }\n\n    return `success${shade}`;\n  };\n\n  // Project is not EE or contentType does not have draftAndPublish enabled\n  if (!window.strapi.isEE || !options?.draftAndPublish || !canRead) {\n    return null;\n  }\n\n  if (collectionType === 'collection-types' && (!documentId || documentId === 'create')) {\n    return null;\n  }\n\n  if (releases && releases.length === 0) {\n    return null;\n  }\n\n  return {\n    title: formatMessage({\n      id: 'content-releases.plugin.name',\n      defaultMessage: 'Releases',\n    }),\n    content: (\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={3} width=\"100%\">\n        {releases?.map((release) => (\n          <Flex\n            key={release.id}\n            direction=\"column\"\n            alignItems=\"start\"\n            borderWidth=\"1px\"\n            borderStyle=\"solid\"\n            borderColor={getReleaseColorVariant(release.actions[0].type, '200')}\n            overflow=\"hidden\"\n            hasRadius\n          >\n            <Box\n              paddingTop={3}\n              paddingBottom={3}\n              paddingLeft={4}\n              paddingRight={4}\n              background={getReleaseColorVariant(release.actions[0].type, '100')}\n              width=\"100%\"\n            >\n              <Typography\n                fontSize={1}\n                variant=\"pi\"\n                textColor={getReleaseColorVariant(release.actions[0].type, '600')}\n              >\n                {formatMessage(\n                  {\n                    id: 'content-releases.content-manager-edit-view.list-releases.title',\n                    defaultMessage:\n                      '{isPublish, select, true {Will be published in} other {Will be unpublished in}}',\n                  },\n                  { isPublish: release.actions[0].type === 'publish' }\n                )}\n              </Typography>\n            </Box>\n            <Flex padding={4} direction=\"column\" gap={2} width=\"100%\" alignItems=\"flex-start\">\n              <Typography fontSize={2} fontWeight=\"bold\" variant=\"omega\" textColor=\"neutral700\">\n                {release.name}\n              </Typography>\n              {release.scheduledAt && release.timezone && (\n                <Typography variant=\"pi\" textColor=\"neutral600\">\n                  {formatMessage(\n                    {\n                      id: 'content-releases.content-manager-edit-view.scheduled.date',\n                      defaultMessage: '{date} at {time} ({offset})',\n                    },\n                    {\n                      date: formatDate(new Date(release.scheduledAt), {\n                        day: '2-digit',\n                        month: '2-digit',\n                        year: 'numeric',\n                        timeZone: release.timezone,\n                      }),\n                      time: formatTime(new Date(release.scheduledAt), {\n                        hourCycle: 'h23',\n                        timeZone: release.timezone,\n                      }),\n                      offset: getTimezoneOffset(release.timezone, new Date(release.scheduledAt)),\n                    }\n                  )}\n                </Typography>\n              )}\n              {canDeleteAction ? (\n                <ReleaseActionMenu.Root hasTriggerBorder>\n                  <ReleaseActionMenu.EditReleaseItem releaseId={release.id} />\n                  <ReleaseActionMenu.DeleteReleaseActionItem\n                    releaseId={release.id}\n                    actionId={release.actions[0].id}\n                  />\n                </ReleaseActionMenu.Root>\n              ) : null}\n            </Flex>\n          </Flex>\n        ))}\n      </Flex>\n    ),\n  };\n};\n\nexport { Panel };\n", "export const pluginId = 'content-releases';\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import { PaperPlane } from '@strapi/icons';\n\nimport { ReleaseActionModalForm } from './components/ReleaseActionModal';\nimport { Panel as ReleasesPanel } from './components/ReleasesPanel';\n// import { addColumnToTableHook } from './components/ReleaseListCell';\nimport { PERMISSIONS } from './constants';\nimport { pluginId } from './pluginId';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\nimport type { DocumentActionComponent } from '@strapi/content-manager/strapi-admin';\nimport type { Plugin } from '@strapi/types';\n\n// eslint-disable-next-line import/no-default-export\nconst admin: Plugin.Config.AdminInput = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register(app: StrapiApp) {\n    /**\n     * Hook that adds the locale column in the Release Details table\n     * @constant\n     * @type {string}\n     */\n    app.createHook('ContentReleases/pages/ReleaseDetails/add-locale-in-releases');\n\n    if (window.strapi.features.isEnabled('cms-content-releases')) {\n      app.addMenuLink({\n        to: `plugins/${pluginId}`,\n        icon: PaperPlane,\n        intlLabel: {\n          id: `${pluginId}.plugin.name`,\n          defaultMessage: 'Releases',\n        },\n        Component: () => import('./pages/App').then((mod) => ({ default: mod.App })),\n        permissions: PERMISSIONS.main,\n        position: 2,\n      });\n\n      // Insert the releases container into the CM's sidebar on the Edit View\n      const contentManagerPluginApis = app.getPlugin('content-manager').apis;\n      if (\n        'addEditViewSidePanel' in contentManagerPluginApis &&\n        typeof contentManagerPluginApis.addEditViewSidePanel === 'function'\n      ) {\n        contentManagerPluginApis.addEditViewSidePanel([ReleasesPanel]);\n      }\n\n      // Insert the \"add to release\" action into the CM's Edit View\n      if (\n        'addDocumentAction' in contentManagerPluginApis &&\n        typeof contentManagerPluginApis.addDocumentAction === 'function'\n      ) {\n        contentManagerPluginApis.addDocumentAction((actions: DocumentActionComponent[]) => {\n          const indexOfDeleteAction = actions.findIndex((action) => action.type === 'unpublish');\n          actions.splice(indexOfDeleteAction, 0, ReleaseActionModalForm);\n          return actions;\n        });\n      }\n\n      app.addSettingsLink('global', {\n        id: pluginId,\n        to: 'releases',\n        intlLabel: {\n          id: `${pluginId}.plugin.name`,\n          defaultMessage: 'Releases',\n        },\n        permissions: [],\n        async Component() {\n          const { ProtectedReleasesSettingsPage } = await import('./pages/ReleasesSettingsPage');\n          return { default: ProtectedReleasesSettingsPage };\n        },\n      });\n\n      // app.plugins['content-manager'].apis.addBulkAction((actions: BulkActionComponent[]) => {\n      //   // We want to add this action to just before the delete action all the time\n      //   const deleteActionIndex = actions.findIndex((action) => action.type === 'delete');\n\n      //   actions.splice(deleteActionIndex, 0, ReleaseAction);\n      //   return actions;\n      // });\n      // Hook that adds a column into the CM's LV table\n      // app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\n    } else if (\n      !window.strapi.features.isEnabled('cms-content-releases') &&\n      window.strapi?.flags?.promoteEE\n    ) {\n      app.addSettingsLink('global', {\n        id: pluginId,\n        to: '/plugins/purchase-content-releases',\n        intlLabel: {\n          id: `${pluginId}.plugin.name`,\n          defaultMessage: 'Releases',\n        },\n        permissions: [],\n        async Component() {\n          const { PurchaseContentReleases } = await import('./pages/PurchaseContentReleases');\n          return { default: PurchaseContentReleases };\n        },\n        licenseOnly: true,\n      });\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, 'content-releases'),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default admin;\n"],
  "mappings": "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",
  "names": ["create", "ReactRouterLink", "useDocumentLayout", "pluginId", "ReleasesPanel"]
}
